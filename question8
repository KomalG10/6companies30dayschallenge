//find consequtive integer from datastream

class DataStream {
public:
unordered_map<int,int> map;
queue<int>q;
int K;
int temp;
    DataStream(int value, int k) {
        K=k;
        temp= value;
    }
    
    bool consec(int num) {
           q.push(num);
           map[num]++;
        if(q.size() >=K)
        {
           
            if(q.size()>K){
                map[q.front()]--;
                if(map[q.front()] == 0)
                map.erase(q.front());
                q.pop();
            }

                if(map.size() == 1 && map[temp]>0)
                return true;
                else
                return false;
            
        }
        else
        return false;
    }
};

/**
 * Your DataStream object will be instantiated and called as such:
 * DataStream* obj = new DataStream(value, k);
 * bool param_1 = obj->consec(num);
 */
