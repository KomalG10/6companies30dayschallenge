high access employee

class Solution {
    bool isvalid(vector<int> &times)
    {
        int n = times.size();
        for(int i=0;i<n-2;i++)
        {
            if(times[i+2] - times[i] < 60)
            return true;
        }
        return false;
    }
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        vector<string> ans;
        unordered_map < string, vector<int> > umap;
        for(auto x : access_times)
        {
            string hours = x[1].substr(0,2);
            string min = x[1].substr(2,2);
            int totalmin = stoi(hours)*60 + stoi(min);
            umap[x[0]].push_back(totalmin);
        }
        for(auto p : umap)
        {
            if(p.second.size()<3)
            continue;
            sort(p.second.begin(),p.second.end());
            if(isvalid(p.second))
            {
                ans.push_back(p.first);
            }
        }
        return ans;
    }
};
